#
# def prod(a , b):
#     product = 0
#     while(b):
#         product = product + a
#         b = b - 1
#     return product
#
#
# print(prod(3, 3))
#
#
# def find_sec_rep_no(test):
#     count = 0
#     for i in range(len(test) -1):
#         if test[i] == test[i+1]:
#             count += 1
#             if count == 2:
#                 return test[i]
#
#
# test = [1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 11, 11]
# print(find_sec_rep_no(test))
# test = [1,2,3,4,5]
# print(test[-1:-5:-1])
# a,b = (4,5),(5,6)
# print(a+b)


# def fibonacci(xterms):
#     # first two terms
#     x1 = 0
#     x2 = 1
#     count = 0
#
#     if xterms <= 0:
#        print("Please provide a +ve integer")
#     elif xterms == 1:
#        print("Fibonacci seq upto",xterms,":")
#        print(x1)
#     else:
#        while count < xterms:
#            xth = x1 + x2
#            x1 = x2
#            x2 = xth
#            count += 1
#            yield xth
#
# fib = fibonacci(5)
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))

# class Person:
#     def __init__(self,name, age):
#         self.name = name
#         self.age = age
#
#     def display(self):
#         print("hello rohini")
#
#
# class Student(Person):
#     def __init__(self,name, age,rol_no):
#         # Person.__init__(self, name, age)
#         super().__init__(name,age)
#         self.rol_no = rol_no
#
#
# p1 = Person("rohini",21)
# s1 = Student("rohi",21,70)
# print("name =",s1.name, "age =",s1.age, "roll no =",s1.rol_no)

# def find_unique(l):
#     size = len(l) -1
#     temp = size
#     l.sort()
#     print(l)
#     ele_list = []
#     i= 0
#     while(i < temp+1):
#         if i == temp:
#             ele_list.append(l[i])
#             break
#         elif l[i] == l[i+1]:
#             i = i+2
#         else:
#             ele_list.append(l[i])
#
#     print(ele_list)

# l = [1,2,3,2,1,3,5,8,9,8,5]
# find_unique(l)

# def firstNonRepeating(arr, n):
#     map = {}
#     for i in range(n):
#         if arr[i] not in map:
#             map[arr[i]]=0
#         map[arr[i]] +=1
#
#     for x in map:
#         if map[x]==1:
#             print(x)
#
#
# arr = [9, 4, 9, 6, 7, 4, 7]
# n = len(arr)
# firstNonRepeating(arr, n)
# def uppercase_decorator(function):
#     def wrapper():
#         fun = function()
#         makeuppercase = fun.upper()
#         return makeuppercase
#     return wrapper
#
# @uppercase_decorator
# def say_hello():
#     return "hello dear"
#
# print(say_hello())#
# def prod(a , b):
#     product = 0
#     while(b):
#         product = product + a
#         b = b - 1
#     return product
#
#
# print(prod(3, 3))
#
#
# def find_sec_rep_no(test):
#     count = 0
#     for i in range(len(test) -1):
#         if test[i] == test[i+1]:
#             count += 1
#             if count == 2:
#                 return test[i]
#
#
# test = [1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 11, 11]
# print(find_sec_rep_no(test))
# test = [1,2,3,4,5]
# print(test[-1:-5:-1])
# a,b = (4,5),(5,6)
# print(a+b)


# def fibonacci(xterms):
#     # first two terms
#     x1 = 0
#     x2 = 1
#     count = 0
#
#     if xterms <= 0:
#        print("Please provide a +ve integer")
#     elif xterms == 1:
#        print("Fibonacci seq upto",xterms,":")
#        print(x1)
#     else:
#        while count < xterms:
#            xth = x1 + x2
#            x1 = x2
#            x2 = xth
#            count += 1
#            yield xth
#
# fib = fibonacci(5)
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))

# class Person:
#     def __init__(self,name, age):
#         self.name = name
#         self.age = age
#
#     def display(self):
#         print("hello rohini")
#
#
# class Student(Person):
#     def __init__(self,name, age,rol_no):
#         # Person.__init__(self, name, age)
#         super().__init__(name,age)
#         self.rol_no = rol_no
#
#
# p1 = Person("rohini",21)
# s1 = Student("rohi",21,70)
# print("name =",s1.name, "age =",s1.age, "roll no =",s1.rol_no)

# def find_unique(l):
#     size = len(l) -1
#     temp = size
#     l.sort()
#     print(l)
#     ele_list = []
#     i= 0
#     while(i < temp+1):
#         if i == temp:
#             ele_list.append(l[i])
#             break
#         elif l[i] == l[i+1]:
#             i = i+2
#         else:
#             ele_list.append(l[i])
#
#     print(ele_list)

# l = [1,2,3,2,1,3,5,8,9,8,5]
# find_unique(l)

# def firstNonRepeating(arr, n):
#     map = {}
#     for i in range(n):
#         if arr[i] not in map:
#             map[arr[i]]=0
#         map[arr[i]] +=1
#
#     for x in map:
#         if map[x]==1:
#             print(x)
#
#
# arr = [9, 4, 9, 6, 7, 4, 7]
# n = len(arr)
# firstNonRepeating(arr, n)
# def uppercase_decorator(function):
#     def wrapper():
#         fun = function()
#         makeuppercase = fun.upper()
#         return makeuppercase
#     return wrapper
#
# @uppercase_decorator
# def say_hello():
#     return "hello dear"
#
# print(say_hello())

# for letter in range(ord('a'),ord('z')+1):
#     print(chr(letter))

# for num in range(65,97):
#     print(chr(num))
# print(chr(400))
# print(ord('i')*4)

# A,B,C = input().split()
# A,B = B,A
# A=int(A)*int(C)
# B=int(C)+int(B)
# print(A,B)


# def smart_div(fun):
#     def inner(a,b):
#         if b > a:
#             a,b = b,a
#         return fun(a,b)
#     return inner
#
# @smart_div
# def div(a,b):
#     return a/b
#
#
# div = div(5,20)
# print(div)

from collections import defaultdict


def find_1st_non_repeating_ele(li,n):
    mp = defaultdict(lambda :0)
    print(mp)
    for i in range(n):
        mp[li[i]]+=1
    map = dict(mp.items())
    print(map)
    res = []
    for key,val in map.items():
        print(key,val)
        if mp[key] == 1:
            res.append(key)
    return res


li = [2, 3, 7, 11, 2,6, 3, 11]
n = len(li)
print(find_1st_non_repeating_ele(li,n))


1.Write a program reverse a string ?

2.Find count accourance of Palindrome in a list?

3.Find length of string without using any built in functions?

4.Diamond program add,sub,mul,division

5.Write a pgm for a list using bubble sort

6.Wrt a program to shuffle a list without using inbuilt methods?

7.write program for overloading?

8.write a program for decorators?

How is Multithreading achieved in Python?
How can you build a simple logistic regression model in Python?
Which library would you prefer for plotting in Python language: Seaborn or Matplotlib?
What is the main difference between a Pandas series and a single-column DataFrame in Python?
How can you handle duplicate values in a dataset for a variable in Python?
Can we create a DataFrame with multiple data types in Python? If yes, how can you do it?
Why you should use NumPy arrays instead of nested Python lists?
Which scientific libraries in SciPy have you worked with in your project?
Which python library is used for Machine Learning?
How can you train and interpret a linear regression model in SciKit learn?
Define slicing in Python?
How can Python be an interpreted language?
Define package in Python?
Which command is used to delete files in Python?
Define pickling and unpickling in Python?

What do you mean by Class Cast Exception?
Differentiate between Primary key and a Unique key.
Why java is considered as dynamic?
What is joins in SQL?
Differentiate between Method Overloading and Method Overriding.
What is the purpose of finalize () method in Java?
What is Synchronization?
What is the function of DBMS?
Difference between Abstract class and Interface.
What is the purpose of "Register" Keyword?